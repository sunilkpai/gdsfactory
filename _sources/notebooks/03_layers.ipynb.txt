{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Technology\n",
    "\n",
    "gdsfactory includes a default Technology in `gdsfactory.tech` that you can use as an inspiration to create your own.\n",
    "\n",
    "\n",
    "## Layers\n",
    "\n",
    "A GDS has different layers to describe the different fabrication process steps.\n",
    "\n",
    "GDS layers have 2 integer numbers: GDSlayer, GDSpurpose\n",
    "\n",
    "Klayout shows Layers with a color, style and transparency when showing GDS layouts."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import gdsfactory as gf\n",
    "\n",
    "# gf.CONF.plotter = 'holoviews'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "c = gf.layers.LAYER_SET.preview()\n",
    "c.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "layer_wg = gf.LAYER.WG\n",
    "print(layer_wg)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Remove layers\n",
    "\n",
    "You can remove layers using the `remove_layers()` function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "removed = c.remove_layers(layers=(gf.LAYER.WG, gf.LAYER.WGN))\n",
    "removed.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Remap layers\n",
    "\n",
    "You can remap (change the polygons from one layer to another layer) using the `remap_layer`, which will return a new `Component`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "c = gf.components.straight(layer=(2, 0))\n",
    "c.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "remap = c.remap_layers(layermap={(2, 0): gf.LAYER.WGN})\n",
    "remap.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Extract layers\n",
    "\n",
    "You can also extract layers using the `extract` function. This function returns a new flattened Component that contains the extracted layers.\n",
    "A flat Component does not have references, and all the polygons are absorbed by the top cell."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "extract = c.extract(layers=(gf.LAYER.M1,))\n",
    "extract.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Custom cross_section\n",
    "\n",
    "You can create a `CrossSection` from scratch or you can customize the cross_section functions in `gf.cross_section`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import gdsfactory as gf\n",
    "\n",
    "strip2 = gf.partial(gf.cross_section.strip, layer=(2, 0))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "c = gf.components.straight(cross_section=strip2)\n",
    "c.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import gdsfactory as gf\n",
    "\n",
    "pin = gf.partial(\n",
    "    gf.cross_section.strip,\n",
    "    sections=(\n",
    "        gf.tech.Section(width=2, layer=gf.LAYER.N, offset=+1),\n",
    "        gf.tech.Section(width=2, layer=gf.LAYER.P, offset=-1),\n",
    "    ),\n",
    ")\n",
    "c = gf.components.straight(cross_section=pin)\n",
    "c.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "How can you group all components to test them?\n",
    "\n",
    "You can create a dict of functions and group them\n",
    "\n",
    "```python\n",
    "\n",
    "factory = dict(\n",
    "    straight_heater_metal = gf.components.straight_heater_metal,\n",
    "    bend = gf.components.bend_euler\n",
    ")\n",
    "\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import gdsfactory as gf\n",
    "\n",
    "c = gf.components.straight(layer=(41, 0))\n",
    "c.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "cross_section = gf.cross_section.nitride\n",
    "wg = gf.components.straight(cross_section=cross_section)\n",
    "gc = gf.components.grating_coupler_elliptical_te(layer=(34, 0), wg_width=1.0)\n",
    "wg_gc = gf.routing.add_fiber_single(\n",
    "    component=wg,\n",
    "    grating_coupler=gc,\n",
    "    cross_section=gf.cross_section.nitride,\n",
    "    with_loopback=False,\n",
    ")\n",
    "\n",
    "# Loopback is an alinment structure where two gratings are connected back to back\n",
    "wg_gc.plot()\n",
    "wg_gc.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### FabA\n",
    "\n",
    "Lets create some component factories for FabA\n",
    "\n",
    "FabA only has one Metal layer available that is defined in GDS layer (30, 0)\n",
    "\n",
    "The metal layer traces are 2um wide"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import gdsfactory as gf\n",
    "from gdsfactory.cross_section import strip\n",
    "from gdsfactory.tech import Layer\n",
    "\n",
    "\n",
    "WIDTH = 2\n",
    "LAYER = (34, 0)\n",
    "\n",
    "xs_metal = gf.partial(strip, width=WIDTH, layer=LAYER)\n",
    "\n",
    "straight = gf.partial(gf.components.straight, cross_section=xs_metal)\n",
    "bend_euler = gf.partial(gf.components.bend_euler, cross_section=xs_metal)\n",
    "mmi1x2 = gf.partial(\n",
    "    gf.components.mmi1x2,\n",
    "    cross_section=xs_metal,\n",
    "    width=WIDTH,\n",
    "    width_taper=WIDTH,\n",
    "    width_mmi=3 * WIDTH,\n",
    ")\n",
    "mzi = gf.partial(gf.components.mzi, cross_section=xs_metal, splitter=mmi1x2)\n",
    "gc = gf.partial(\n",
    "    gf.components.grating_coupler_elliptical_te, layer=LAYER, wg_width=WIDTH\n",
    ")\n",
    "\n",
    "\n",
    "c = mzi()\n",
    "c_gc = gf.routing.add_fiber_array(\n",
    "    component=c, grating_coupler=gc, cross_section=xs_metal\n",
    ")\n",
    "c_gc.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "you can also add a cell `decorator` in case you want to add pins or device recognition layers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import gdsfactory as gf\n",
    "from gdsfactory.add_pins import add_outline, add_pins\n",
    "from gdsfactory.cross_section import strip\n",
    "from gdsfactory.difftest import difftest\n",
    "\n",
    "WIDTH = 2\n",
    "LAYER = (34, 0)\n",
    "\n",
    "fab_a_metal = gf.partial(strip, width=WIDTH, layer=LAYER)\n",
    "\n",
    "\n",
    "def test_waveguide():\n",
    "    c = gf.components.straight(cross_section=fab_a_metal)\n",
    "    difftest(c)\n",
    "\n",
    "\n",
    "def decorator(component) -> None:\n",
    "    \"\"\"Fab specific functions over a component.\"\"\"\n",
    "    add_pins(component)\n",
    "    add_outline(component)\n",
    "\n",
    "\n",
    "mmi2x2 = gf.partial(gf.components.mmi2x2, decorator=decorator)\n",
    "mmi1x2 = gf.partial(gf.components.mmi1x2, decorator=decorator)\n",
    "bend_euler = gf.partial(gf.components.bend_euler, decorator=decorator)\n",
    "straight = gf.partial(gf.components.straight, decorator=decorator)\n",
    "mzi = gf.partial(gf.components.mzi, splitter=mmi1x2, bend=bend_euler, straight=straight)\n",
    "\n",
    "mzi10 = mzi(delta_length=10)\n",
    "mzi10.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### FabB\n",
    "\n",
    "FabB has photonic waveguides that require many cladding layers to avoid dopants\n",
    "\n",
    "Lets say that the waveguides are defined in layer (2, 0) and are 0.3um wide"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import gdsfactory as gf\n",
    "from gdsfactory.cross_section import strip\n",
    "from gdsfactory.difftest import difftest\n",
    "\n",
    "WIDTH = 0.3\n",
    "LAYER = (2, 0)\n",
    "\n",
    "\n",
    "fab_b_metal = gf.partial(\n",
    "    strip,\n",
    "    width=WIDTH,\n",
    "    layer=LAYER,\n",
    ")\n",
    "\n",
    "straight = gf.partial(gf.components.straight, cross_section=fab_b_metal)\n",
    "bend_euler = gf.partial(gf.components.bend_euler, cross_section=fab_b_metal)\n",
    "mmi1x2 = gf.partial(\n",
    "    gf.components.mmi1x2,\n",
    "    cross_section=fab_b_metal,\n",
    "    width=WIDTH,\n",
    "    width_taper=WIDTH,\n",
    "    width_mmi=4 * WIDTH,\n",
    ")\n",
    "mzi = gf.partial(gf.components.mzi, cross_section=fab_b_metal, splitter=mmi1x2)\n",
    "gc = gf.partial(\n",
    "    gf.components.grating_coupler_elliptical_te, layer=LAYER, wg_width=WIDTH\n",
    ")\n",
    "\n",
    "\n",
    "def test_waveguide():\n",
    "    c = gf.components.straight(cross_section=fab_b_metal)\n",
    "    difftest(c)\n",
    "\n",
    "\n",
    "c = mzi()\n",
    "wg_gc = gf.routing.add_fiber_array(\n",
    "    component=c, grating_coupler=gc, cross_section=fab_b_metal\n",
    ")\n",
    "wg_gc.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### FabC\n",
    "\n",
    "Lets assume that fab C has both Silicon and Silicon Nitride components, and you need different waveguide widths for C and O band.\n",
    "\n",
    "Lets asume that O band nitride waveguide width is 0.9 and Cband Nitride waveguide width is 1um, and for 0.4um for Silicon O band and 0.5um for silicon Cband.\n",
    "\n",
    "Lets also that this foundry has an LVS flow where all components have optical pins defined in layer (100, 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "from typing import Callable, Dict, Optional, Tuple\n",
    "import pydantic.dataclasses as dataclasses\n",
    "\n",
    "import gdsfactory as gf\n",
    "from gdsfactory.add_pins import add_pin_rectangle_inside\n",
    "from gdsfactory.component import Component, ComponentReference\n",
    "from gdsfactory.cross_section import strip\n",
    "from gdsfactory.tech import LayerLevel, LayerStack, Tech\n",
    "from gdsfactory.types import Layer\n",
    "\n",
    "\n",
    "@dataclasses.dataclass(frozen=True)\n",
    "class LayerMap:\n",
    "    WG: Layer = (10, 1)\n",
    "    WG_CLAD: Layer = (10, 2)\n",
    "    WGN: Layer = (34, 0)\n",
    "    WGN_CLAD: Layer = (36, 0)\n",
    "    PIN: Layer = (100, 0)\n",
    "\n",
    "\n",
    "LAYER = LayerMap()\n",
    "WIDTH_NITRIDE_OBAND = 0.9\n",
    "WIDTH_NITRIDE_CBAND = 1.0\n",
    "PORT_TYPE_TO_LAYER = dict(optical=(100, 0))\n",
    "\n",
    "\n",
    "def get_layer_stack_fab_c(thickness: float = 350.0) -> LayerStack:\n",
    "    \"\"\"Returns generic LayerStack\"\"\"\n",
    "    return LayerStack(\n",
    "        layers=dict(\n",
    "            core=LayerLevel(\n",
    "                layer=(34, 0),\n",
    "                thickness=350.0,\n",
    "                zmin=220.0 + 100.0,\n",
    "            ),\n",
    "            clad=LayerLevel(layer=(36, 0)),\n",
    "        )\n",
    "    )\n",
    "\n",
    "\n",
    "def add_pins(\n",
    "    component: Component,\n",
    "    function: Callable = add_pin_rectangle_inside,\n",
    "    pin_length: float = 0.5,\n",
    "    port_layer: Layer = LAYER.PIN,\n",
    "    **kwargs,\n",
    ") -> Component:\n",
    "    \"\"\"Add Pin port markers.\n",
    "\n",
    "    Args:\n",
    "        component: to add ports\n",
    "        function:\n",
    "        pin_length:\n",
    "        port_layer:\n",
    "        function: kwargs\n",
    "\n",
    "    \"\"\"\n",
    "    for p in component.ports.values():\n",
    "        function(\n",
    "            component=component,\n",
    "            port=p,\n",
    "            layer=port_layer,\n",
    "            layer_label=port_layer,\n",
    "            pin_length=pin_length,\n",
    "            **kwargs,\n",
    "        )\n",
    "    return component\n",
    "\n",
    "\n",
    "# cross_sections\n",
    "\n",
    "bbox_layers = [LAYER.WGN_CLAD]\n",
    "bbox_offsets = [3]\n",
    "\n",
    "fabc_nitride_cband = gf.partial(\n",
    "    strip,\n",
    "    width=WIDTH_NITRIDE_CBAND,\n",
    "    layer=LAYER.WGN,\n",
    "    bbox_layers=bbox_layers,\n",
    "    bbox_offsets=bbox_offsets,\n",
    ")\n",
    "fabc_nitride_oband = gf.partial(\n",
    "    strip,\n",
    "    width=WIDTH_NITRIDE_OBAND,\n",
    "    layer=LAYER.WGN,\n",
    "    bbox_layers=bbox_layers,\n",
    "    bbox_offsets=bbox_offsets,\n",
    ")\n",
    "\n",
    "\n",
    "# LEAF COMPONENTS have pins\n",
    "\n",
    "mmi1x2_nitride_c = gf.partial(\n",
    "    gf.components.mmi1x2,\n",
    "    width=WIDTH_NITRIDE_CBAND,\n",
    "    cross_section=fabc_nitride_cband,\n",
    "    decorator=add_pins,\n",
    ")\n",
    "mmi1x2_nitride_o = gf.partial(\n",
    "    gf.components.mmi1x2,\n",
    "    width=WIDTH_NITRIDE_OBAND,\n",
    "    cross_section=fabc_nitride_oband,\n",
    "    decorator=add_pins,\n",
    ")\n",
    "bend_euler_c = gf.partial(\n",
    "    gf.components.bend_euler, cross_section=fabc_nitride_cband, decorator=add_pins\n",
    ")\n",
    "straight_c = gf.partial(\n",
    "    gf.components.straight, cross_section=fabc_nitride_cband, decorator=add_pins\n",
    ")\n",
    "bend_euler_o = gf.partial(\n",
    "    gf.components.bend_euler, cross_section=fabc_nitride_oband, decorator=add_pins\n",
    ")\n",
    "straight_o = gf.partial(\n",
    "    gf.components.straight, cross_section=fabc_nitride_oband, decorator=add_pins\n",
    ")\n",
    "\n",
    "gc_nitride_c = gf.partial(\n",
    "    gf.components.grating_coupler_elliptical_te,\n",
    "    grating_line_width=0.6,\n",
    "    wg_width=WIDTH_NITRIDE_CBAND,\n",
    "    layer=LAYER.WGN,\n",
    "    decorator=add_pins,\n",
    ")\n",
    "\n",
    "# HIERARCHICAL COMPONENTS made of leaf components\n",
    "\n",
    "mzi_nitride_c = gf.partial(\n",
    "    gf.components.mzi,\n",
    "    cross_section=fabc_nitride_cband,\n",
    "    splitter=mmi1x2_nitride_c,\n",
    "    decorator=add_pins,\n",
    "    straight=straight_c,\n",
    "    bend=bend_euler_c,\n",
    ")\n",
    "mzi_nitride_o = gf.partial(\n",
    "    gf.components.mzi,\n",
    "    cross_section=fabc_nitride_oband,\n",
    "    splitter=mmi1x2_nitride_o,\n",
    "    decorator=add_pins,\n",
    "    straight=straight_o,\n",
    "    bend=bend_euler_o,\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "mzi = mzi_nitride_c()\n",
    "mzi_gc = gf.routing.add_fiber_single(\n",
    "    component=mzi,\n",
    "    grating_coupler=gc_nitride_c,\n",
    "    cross_section=fabc_nitride_cband,\n",
    "    optical_routing_type=1,\n",
    "    straight=straight_c,\n",
    "    bend=bend_euler_c,\n",
    ")\n",
    "mzi_gc.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "ls = get_layer_stack_fab_c()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "ls.to_dict()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3D rendering\n",
    "\n",
    "You can also render components in 3D.\n",
    "\n",
    "You will need to define two things:\n",
    "\n",
    "1. LayerStack: for each layer contains thickness of each material and z position\n",
    "2. LayerSet: for each layer contains colors (this file is the same that Klayout uses). You can load it with `gf.layers.load_lyp()`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "heater = gf.components.straight_heater_metal(length=50)\n",
    "heater.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "scene = gf.export.to_3d(component=heater, layer_set=gf.layers.LAYER_SET)\n",
    "scene.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
