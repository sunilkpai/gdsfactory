{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Netlist driven flow (circuits)\n",
    "\n",
    "You can define a circuit by its YAML netlist thanks to `gdsfactory.read.from_yaml`\n",
    "\n",
    "YAML is a more human readable version of JSON\n",
    "\n",
    "to define a Component from YAML you need to define:\n",
    "\n",
    "- instances: with each instance setting\n",
    "- placements: with X and Y\n",
    "\n",
    "Optionally you can also define:\n",
    "\n",
    "- routes: between instances\n",
    "- connections: to connect components ports\n",
    "- ports: define input and output circuit ports\n",
    "\n",
    "\n",
    "You have two options for working with gdsfactory:\n",
    "\n",
    "1. **layout driven flow**: you code your layout using python functions, and then extract the YAML netlist to simulate the circuit. These is the flow that you have been doing so far.\n",
    "2. **netlist driven flow**: you start with the YAML definition of your circuit (instances, placements and routes). From the netlist you can simulate the circuit or generate the layout.\n",
    "\n",
    "Using the netlist driven flow you can define components, circuits and masks.\n",
    "\n",
    "Lets see for example what you can do\n",
    "\n",
    "The following mask will build a mask from YAML and show it in Klayout"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "%%script gf yaml build \n",
    "\n",
    "name: mask_compact\n",
    "pdk: ubcpdk\n",
    "\n",
    "instances:\n",
    "  rings:\n",
    "    component: pack_doe\n",
    "    settings:\n",
    "      doe: ring_single\n",
    "      settings:\n",
    "        radius: [30, 50, 20, 40]\n",
    "        length_x: [1, 2, 3]\n",
    "      do_permutations: True\n",
    "      function:\n",
    "        function: add_fiber_array\n",
    "        settings:\n",
    "            fanout_length: 200\n",
    "\n",
    "\n",
    "  mzis:\n",
    "    component: pack_doe_grid\n",
    "    settings:\n",
    "      doe: mzi\n",
    "      settings:\n",
    "        delta_length: [10, 100]\n",
    "      do_permutations: True\n",
    "      spacing: [10, 10]\n",
    "      function: add_fiber_array\n",
    "\n",
    "placements:\n",
    "  rings:\n",
    "    xmin: 50\n",
    "\n",
    "  mzis:\n",
    "    xmin: rings,east\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## instances\n",
    "\n",
    "Lets start by defining the `instances`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "attributes": {
     "classes": [],
     "id": "",
     "n": "5"
    }
   },
   "outputs": [],
   "source": [
    "import gdsfactory as gf\n",
    "\n",
    "gf.CONF.plotter = \"matplotlib\"  # This notebook rendered with 'holoviews' exceeds the 100MB limit for github pages\n",
    "\n",
    "yaml = \"\"\"\n",
    "\n",
    "instances:\n",
    "    mmi_long:\n",
    "      component: mmi1x2\n",
    "      settings:\n",
    "        width_mmi: 4.5\n",
    "        length_mmi: 10\n",
    "    mmi_short:\n",
    "      component: mmi1x2\n",
    "      settings:\n",
    "        width_mmi: 4.5\n",
    "        length_mmi: 5\n",
    "\"\"\"\n",
    "\n",
    "c = gf.read.from_yaml(yaml)\n",
    "c.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can modify the instances later (not recommended).\n",
    "\n",
    "I recommend that you define that using `placements` in the `YAML` file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "c.instances[\"mmi_long\"].x = 100\n",
    "c.show()\n",
    "c.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## placements\n",
    "\n",
    "Lets define the placecemts of each instance by defining a `placements` section in YAML\n",
    "\n",
    "Lets place an `mmi_long` where you can place the `W0` port at `x=20, y=10`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import gdsfactory as gf\n",
    "\n",
    "yaml = \"\"\"\n",
    "instances:\n",
    "    mmi_long:\n",
    "      component: mmi1x2\n",
    "      settings:\n",
    "        width_mmi: 4.5\n",
    "        length_mmi: 5\n",
    "placements:        \n",
    "    mmi_long:\n",
    "        port: o1\n",
    "        x: 20\n",
    "        y: 10\n",
    "\"\"\"\n",
    "\n",
    "c = gf.read.from_yaml(yaml)\n",
    "c.show()\n",
    "c.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can also mirror it"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import gdsfactory as gf\n",
    "\n",
    "yaml = \"\"\"\n",
    "instances:\n",
    "    mmi_long:\n",
    "      component: mmi1x2\n",
    "      settings:\n",
    "        width_mmi: 4.5\n",
    "        length_mmi: 5\n",
    "placements:        \n",
    "    mmi_long:\n",
    "        port: o1\n",
    "        x: 20\n",
    "        y: 10\n",
    "        mirror: True\n",
    "\"\"\"\n",
    "\n",
    "c = gf.read.from_yaml(yaml)\n",
    "c.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## ports\n",
    "\n",
    "You can export the ports of any instance to the new `component_from_yaml` Component.\n",
    "\n",
    "You will need to define a `ports` section in YAML\n",
    "\n",
    "Lets expose all the ports from `mmi_long` into the new component.\n",
    "\n",
    "Ports are exposed as `new_port_name: instance_name, port_name`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import gdsfactory as gf\n",
    "\n",
    "yaml = \"\"\"\n",
    "instances:\n",
    "    mmi_long:\n",
    "      component: mmi1x2\n",
    "      settings:\n",
    "        width_mmi: 4.5\n",
    "        length_mmi: 5\n",
    "placements:        \n",
    "    mmi_long:\n",
    "        port: o1\n",
    "        x: 20\n",
    "        y: 10\n",
    "        mirror: True\n",
    "        \n",
    "ports:\n",
    "    o3: mmi_long,o3\n",
    "    o2: mmi_long,o2\n",
    "    o1: mmi_long,o1\n",
    "\"\"\"\n",
    "\n",
    "c = gf.read.from_yaml(yaml)\n",
    "c.show()\n",
    "c.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can also define a mirror placement using a port"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import gdsfactory as gf\n",
    "\n",
    "yaml = \"\"\"\n",
    "instances:\n",
    "    mmi_long:\n",
    "      component: mmi1x2\n",
    "      settings:\n",
    "        width_mmi: 4.5\n",
    "        length_mmi: 5\n",
    "placements:        \n",
    "    mmi_long:\n",
    "        x: 0\n",
    "        y: 0\n",
    "        mirror: o1\n",
    "\"\"\"\n",
    "\n",
    "c = gf.read.from_yaml(yaml)\n",
    "c.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import gdsfactory as gf\n",
    "\n",
    "yaml = \"\"\"\n",
    "instances:\n",
    "    mmi_long:\n",
    "      component: mmi1x2\n",
    "      settings:\n",
    "        width_mmi: 4.5\n",
    "        length_mmi: 5\n",
    "placements:        \n",
    "    mmi_long:\n",
    "        x: 0\n",
    "        y: 0\n",
    "\"\"\"\n",
    "\n",
    "c = gf.read.from_yaml(yaml)\n",
    "c.show()\n",
    "c.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import gdsfactory as gf\n",
    "\n",
    "yaml = \"\"\"\n",
    "instances:\n",
    "    mmi_long:\n",
    "      component: mmi1x2\n",
    "      settings:\n",
    "        width_mmi: 4.5\n",
    "        length_mmi: 5\n",
    "placements:        \n",
    "    mmi_long:\n",
    "        x: 0\n",
    "        y: 0\n",
    "        mirror: 25\n",
    "ports:\n",
    "    o1: mmi_long,o3\n",
    "    o2: mmi_long,o2\n",
    "    o3: mmi_long,o1\n",
    "\"\"\"\n",
    "\n",
    "c = gf.read.from_yaml(yaml)\n",
    "c.show()\n",
    "c.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import gdsfactory as gf\n",
    "\n",
    "yaml = \"\"\"\n",
    "instances:\n",
    "    mmi_long:\n",
    "      component: mmi1x2\n",
    "      settings:\n",
    "        width_mmi: 4.5\n",
    "        length_mmi: 5\n",
    "placements:        \n",
    "    mmi_long:\n",
    "        port: o1\n",
    "        x: 10\n",
    "        y: 20\n",
    "        rotation: 90\n",
    "\"\"\"\n",
    "\n",
    "c = gf.read.from_yaml(yaml)\n",
    "c.show()\n",
    "c.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import gdsfactory as gf\n",
    "\n",
    "yaml = \"\"\"\n",
    "instances:\n",
    "    mmi_long:\n",
    "      component: mmi1x2\n",
    "      settings:\n",
    "        width_mmi: 4.5\n",
    "        length_mmi: 5\n",
    "placements:        \n",
    "    mmi_long:\n",
    "        port: o1\n",
    "        x: 10\n",
    "        y: 20\n",
    "        rotation: 90\n",
    "ports:\n",
    "    o1: mmi_long,o2\n",
    "    o2: mmi_long,o3\n",
    "    o3: mmi_long,o1\n",
    "\"\"\"\n",
    "\n",
    "c = gf.read.from_yaml(yaml)\n",
    "c.show()\n",
    "c.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "c.size_info.north"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "c.size_info.east"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## connections\n",
    "\n",
    "You can connect any two instances by defining a `connections` section in the YAML file.\n",
    "\n",
    "it follows the syntax.\n",
    "\n",
    "`instance_source,port : instance_destination,port`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import gdsfactory as gf\n",
    "\n",
    "yaml = \"\"\"\n",
    "instances:\n",
    "    b:\n",
    "      component: bend_circular\n",
    "    mmi_long:\n",
    "      component: mmi1x2\n",
    "      settings:\n",
    "        width_mmi: 4.5\n",
    "        length_mmi: 10\n",
    "    mmi_short:\n",
    "      component: mmi1x2\n",
    "      settings:\n",
    "        width_mmi: 4.5\n",
    "        length_mmi: 5\n",
    "placements:\n",
    "    mmi_short:\n",
    "        port: o1\n",
    "        x: 10\n",
    "        y: 20\n",
    "connections:\n",
    "    b,o1 : mmi_short,o2\n",
    "    mmi_long,o1: b, o2\n",
    "\n",
    "ports:\n",
    "    o1: mmi_short,o1\n",
    "    o2: mmi_long,o2\n",
    "    o3: mmi_long,o3\n",
    "\"\"\"\n",
    "\n",
    "\n",
    "c = gf.read.from_yaml(yaml)\n",
    "c.show()\n",
    "c.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from omegaconf import OmegaConf\n",
    "import io"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "d = OmegaConf.load(\n",
    "    io.StringIO(\n",
    "        \"\"\"\n",
    "x: mmi_short,o3 10\n",
    "dx: 10\n",
    "\"\"\"\n",
    "    )\n",
    ")\n",
    "d"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "d.keys()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Relative port placing**\n",
    "\n",
    "You can also place a component with respect to another instance port\n",
    "\n",
    "You can also define an x and y offset with `dx` and `dy`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import gdsfactory as gf\n",
    "\n",
    "yaml = \"\"\"\n",
    "instances:\n",
    "    mmi_long:\n",
    "      component: mmi1x2\n",
    "      settings:\n",
    "        width_mmi: 4.5\n",
    "        length_mmi: 10\n",
    "    mmi_short:\n",
    "      component: mmi1x2\n",
    "      settings:\n",
    "        width_mmi: 4.5\n",
    "        length_mmi: 5\n",
    "\n",
    "placements:\n",
    "    mmi_short:\n",
    "        port: o1\n",
    "        x: 0\n",
    "        y: 0\n",
    "    mmi_long:\n",
    "        port: o1\n",
    "        x: mmi_short,o2\n",
    "        y: mmi_short,o2\n",
    "        dx : 10\n",
    "        dy: -10\n",
    "\"\"\"\n",
    "\n",
    "\n",
    "c = gf.read.from_yaml(yaml)\n",
    "c.show()\n",
    "c.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Cicular reference warning**\n",
    "\n",
    "You have to be careful not doing a circuilar reference"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import gdsfactory as gf\n",
    "\n",
    "yaml = \"\"\"\n",
    "instances:\n",
    "    mmi_long:\n",
    "      component: mmi1x2\n",
    "      settings:\n",
    "        width_mmi: 4.5\n",
    "        length_mmi: 10\n",
    "    mmi_short:\n",
    "      component: mmi1x2\n",
    "      settings:\n",
    "        width_mmi: 4.5\n",
    "        length_mmi: 5\n",
    "\n",
    "placements:\n",
    "    mmi_short:\n",
    "        port: o1\n",
    "        x: mmi_long,o2\n",
    "        y: mmi_long,o2\n",
    "    mmi_long:\n",
    "        port: o1\n",
    "        x: mmi_short,o2\n",
    "        y: mmi_short,o2\n",
    "        dx : 10\n",
    "        dy: 20\n",
    "\"\"\"\n",
    "\n",
    "c = gf.read.from_yaml(yaml)\n",
    "c.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## routes\n",
    "\n",
    "You can define routes between two instanes by defining a `routes` section in YAML\n",
    "\n",
    "it follows the syntax\n",
    "\n",
    "```YAML\n",
    "\n",
    "routes:\n",
    "    route_name:\n",
    "        links:\n",
    "            instance_source,port: instance_destination,port\n",
    "        settings:  # for the route (optional)\n",
    "            waveguide: strip\n",
    "            width: 1.2\n",
    "\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import gdsfactory as gf\n",
    "\n",
    "yaml = \"\"\"\n",
    "instances:\n",
    "    mmi_long:\n",
    "      component: mmi1x2\n",
    "      settings:\n",
    "        width_mmi: 4.5\n",
    "        length_mmi: 10\n",
    "    mmi_short:\n",
    "      component: mmi1x2\n",
    "      settings:\n",
    "        width_mmi: 4.5\n",
    "        length_mmi: 5\n",
    "placements:\n",
    "    mmi_long:\n",
    "        x: 100\n",
    "        y: 100\n",
    "routes:\n",
    "    optical:\n",
    "        links:\n",
    "            mmi_short,o2: mmi_long,o1\n",
    "        settings:\n",
    "            cross_section:\n",
    "                cross_section: strip\n",
    "                settings:\n",
    "                    layer: [2, 0]\n",
    "\"\"\"\n",
    "\n",
    "\n",
    "c = gf.read.from_yaml(yaml)\n",
    "c.show()\n",
    "c.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can **rotate** and instance specifying the angle in degrees"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can also define ports for the component"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import gdsfactory as gf\n",
    "\n",
    "yaml = \"\"\"\n",
    "instances:\n",
    "    mmi_long:\n",
    "      component: mmi1x2\n",
    "      settings:\n",
    "        width_mmi: 4.5\n",
    "        length_mmi: 10\n",
    "    mmi_short:\n",
    "      component: mmi1x2\n",
    "      settings:\n",
    "        width_mmi: 4.5\n",
    "        length_mmi: 5\n",
    "        \n",
    "placements:\n",
    "    mmi_long:\n",
    "        rotation: 180\n",
    "        x: 100\n",
    "        y: 100\n",
    "        \n",
    "routes:\n",
    "    optical:\n",
    "        links:\n",
    "            mmi_short,o2: mmi_long,o3\n",
    "    \n",
    "ports:\n",
    "    o1: mmi_short,o1\n",
    "    o2: mmi_long,o1\n",
    "    \n",
    "\"\"\"\n",
    "\n",
    "c = gf.read.from_yaml(yaml)\n",
    "c.show()\n",
    "c.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can also access the routes in the newly created component"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "r = c.routes[\"mmi_short,o2:mmi_long,o3\"]\n",
    "r"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As well as the instances"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "c.instances"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## instances, placements, connections, ports, routes\n",
    "\n",
    "Lets combine all you learned so far.\n",
    "\n",
    "You can define the netlist connections of a component by a netlist in YAML format\n",
    "\n",
    "Note that you define the connections as `instance_source.port ->\n",
    "instance_destination.port` so the order is important and therefore you can only\n",
    "change the position of the `instance_destination`\n",
    "\n",
    "For example, this coupler has the center coupling region at (100, 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "gf.components.coupler_symmetric()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "attributes": {
     "classes": [],
     "id": "",
     "n": "5"
    }
   },
   "outputs": [],
   "source": [
    "import gdsfactory as gf\n",
    "\n",
    "gap = 0.2\n",
    "wg_width = 0.5\n",
    "length = 10\n",
    "\n",
    "yaml = f\"\"\"\n",
    "instances:\n",
    "    left:\n",
    "      component: coupler_symmetric\n",
    "      settings:\n",
    "        gap: {gap}\n",
    "        width: {wg_width}\n",
    "    right:\n",
    "      component: coupler_symmetric\n",
    "      settings:\n",
    "        gap: {gap}\n",
    "        width: {wg_width}\n",
    "    center:\n",
    "      component: coupler_straight\n",
    "      settings:\n",
    "        gap: {gap}\n",
    "        width: {wg_width}\n",
    "        length: {length}\n",
    "\n",
    "placements:\n",
    "    center:\n",
    "        x: 100\n",
    "        y: 0\n",
    "    left:\n",
    "        mirror: True\n",
    "\n",
    "connections:\n",
    "    center,o1: left,o1\n",
    "    right,o1: center,o4\n",
    "\n",
    "ports:\n",
    "    o1: left,o4\n",
    "    o2: left,o3\n",
    "    o3: right,o3\n",
    "    o4: right,o4\n",
    "\n",
    "\"\"\"\n",
    "\n",
    "c = gf.read.from_yaml(yaml)\n",
    "c.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "While this one has the sbend_left_coupler `sl` centered at (100, 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import gdsfactory as gf\n",
    "\n",
    "yaml = \"\"\"\n",
    "instances:\n",
    "    mmi_long:\n",
    "      component: mmi1x2\n",
    "      settings:\n",
    "        width_mmi: 4.5\n",
    "        length_mmi: 10\n",
    "    mmi_short:\n",
    "      component: mmi1x2\n",
    "      settings:\n",
    "        width_mmi: 4.5\n",
    "        length_mmi: 5\n",
    "placements:\n",
    "    mmi_long:\n",
    "        x: 100\n",
    "        y: 100\n",
    "routes:\n",
    "    route1:\n",
    "        links:\n",
    "            mmi_short,o2: mmi_long,o1\n",
    "\"\"\"\n",
    "\n",
    "\n",
    "c = gf.read.from_yaml(yaml)\n",
    "c.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can **rotate** and instance specifying the angle in degrees"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import gdsfactory as gf\n",
    "\n",
    "yaml = \"\"\"\n",
    "instances:\n",
    "    mmi_long:\n",
    "      component: mmi1x2\n",
    "      settings:\n",
    "        width_mmi: 4.5\n",
    "        length_mmi: 10\n",
    "    mmi_short:\n",
    "      component: mmi1x2\n",
    "      settings:\n",
    "        width_mmi: 4.5\n",
    "        length_mmi: 5\n",
    "        \n",
    "placements:\n",
    "    mmi_long:\n",
    "        rotation: 180\n",
    "        x: 100\n",
    "        y: 100\n",
    "routes:\n",
    "    mmi_connect:\n",
    "        links:\n",
    "            mmi_short,o2: mmi_long,o3\n",
    "\"\"\"\n",
    "\n",
    "\n",
    "c = gf.read.from_yaml(yaml)\n",
    "c.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can also define ports for the component"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import gdsfactory as gf\n",
    "\n",
    "yaml = \"\"\"\n",
    "instances:\n",
    "    mmi_long:\n",
    "      component: mmi1x2\n",
    "      settings:\n",
    "        width_mmi: 4.5\n",
    "        length_mmi: 10\n",
    "    mmi_short:\n",
    "      component: mmi1x2\n",
    "      settings:\n",
    "        width_mmi: 4.5\n",
    "        length_mmi: 5\n",
    "        \n",
    "placements:\n",
    "    mmi_long:\n",
    "        rotation: 180\n",
    "        x: 100\n",
    "        y: 100\n",
    "        \n",
    "routes:\n",
    "    optical:\n",
    "        links:\n",
    "            mmi_short,o2: mmi_long,o3\n",
    "    \n",
    "ports:\n",
    "    o1: mmi_short,o1\n",
    "    o2: mmi_long,o1\n",
    "\"\"\"\n",
    "\n",
    "c = gf.read.from_yaml(yaml)\n",
    "c.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "c.routes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "r = c.routes[\"mmi_short,o2:mmi_long,o3\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "c.instances"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "c.routes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can define several routes that will be connected using `gf.routing.get_bundle`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import gdsfactory as gf\n",
    "\n",
    "sample_2x2_connections_solution = \"\"\"\n",
    "name:\n",
    "    connections_2x2_problem\n",
    "\n",
    "instances:\n",
    "    mmi_bottom:\n",
    "      component: mmi2x2\n",
    "    mmi_top:\n",
    "      component: mmi2x2\n",
    "\n",
    "placements:\n",
    "    mmi_top:\n",
    "        x: 100\n",
    "        y: 100\n",
    "\n",
    "routes:\n",
    "    optical:\n",
    "        links:\n",
    "            mmi_bottom,o4: mmi_top,o1\n",
    "            mmi_bottom,o3: mmi_top,o2\n",
    "\n",
    "\"\"\"\n",
    "\n",
    "c = gf.read.from_yaml(sample_2x2_connections_solution)\n",
    "c.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can also add custom component_factories to `gf.read.from_yaml`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "@gf.cell\n",
    "def pad_new(size=(100, 100), layer=gf.LAYER.WG):\n",
    "    c = gf.Component()\n",
    "    compass = c << gf.components.compass(size=size, layer=layer)\n",
    "    c.ports = compass.ports\n",
    "    return c\n",
    "\n",
    "\n",
    "c = pad_new(cache=False)\n",
    "c.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import gdsfactory as gf\n",
    "\n",
    "factory = gf.components.cells\n",
    "\n",
    "gf.get_active_pdk().register_cells(pad_new=pad_new)\n",
    "\n",
    "sample_custom_component = \"\"\"\n",
    "name:\n",
    "    connections_2x2_problem\n",
    "\n",
    "instances:\n",
    "    bot:\n",
    "      component: pad_new\n",
    "    top:\n",
    "      component: pad_new\n",
    "\n",
    "placements:\n",
    "    top:\n",
    "        x: 0\n",
    "        y: 200\n",
    "\"\"\"\n",
    "\n",
    "c = gf.read.from_yaml(sample_custom_component)\n",
    "c.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sample_custom_component = \"\"\"\n",
    "name:\n",
    "    custom_routes\n",
    "\n",
    "instances:\n",
    "    t:\n",
    "      component: pad_array\n",
    "      settings:\n",
    "          orientation: 270\n",
    "          columns: 3\n",
    "    b:\n",
    "      component: pad_array\n",
    "      settings:\n",
    "          orientation: 90\n",
    "          columns: 3\n",
    "\n",
    "placements:\n",
    "    t:\n",
    "        x: 200\n",
    "        y: 400\n",
    "routes:\n",
    "    electrical:\n",
    "        settings:\n",
    "            layer: [31, 0]\n",
    "            width: 10.\n",
    "            end_straight_length: 150\n",
    "        links:\n",
    "            t,e11: b,e11\n",
    "            t,e13: b,e13\n",
    "\"\"\"\n",
    "\n",
    "\n",
    "c = gf.read.from_yaml(sample_custom_component)\n",
    "c.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Also, you can define route aliases, that have different settings and specify the route `factory` as a parameter as well as the `settings` for that particular route alias."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import gdsfactory as gf\n",
    "\n",
    "sample_settings = \"\"\"\n",
    "name: sample_settings\n",
    "\n",
    "instances:\n",
    "    bl:\n",
    "      component: pad\n",
    "    tl:\n",
    "      component: pad\n",
    "    br:\n",
    "      component: pad\n",
    "    tr:\n",
    "      component: pad\n",
    "\n",
    "placements:\n",
    "    tl:\n",
    "        x: 0\n",
    "        y: 200\n",
    "\n",
    "    br:\n",
    "        x: 400\n",
    "        y: 400\n",
    "\n",
    "    tr:\n",
    "        x: 400\n",
    "        y: 600\n",
    "\n",
    "routes:\n",
    "    optical_r100:\n",
    "        settings:\n",
    "            radius: 100\n",
    "            layer: [31, 0]\n",
    "            width: 50\n",
    "        links:\n",
    "            tl,e2: tr,e2\n",
    "    optical_r200:\n",
    "        settings:\n",
    "            radius: 200\n",
    "            width: 10\n",
    "            layer: [31, 0]\n",
    "        links:\n",
    "            bl,e3: br,e3\n",
    "\"\"\"\n",
    "c = gf.read.from_yaml(sample_settings)\n",
    "c.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sample_custom_component = \"\"\"\n",
    "\n",
    "instances:\n",
    "    t:\n",
    "      component: pad_array\n",
    "      settings:\n",
    "          orientation: 270\n",
    "          columns: 3\n",
    "    b:\n",
    "      component: pad_array\n",
    "      settings:\n",
    "          orientation: 90\n",
    "          columns: 3\n",
    "\n",
    "placements:\n",
    "    t:\n",
    "        x: 200\n",
    "        y: 500\n",
    "routes:\n",
    "    optical:\n",
    "        settings: \n",
    "            radius: 50\n",
    "            width: 40\n",
    "            layer: [31,0]\n",
    "            end_straight_length: 150\n",
    "            separation: 50\n",
    "        links:\n",
    "            t,e11: b,e11\n",
    "            t,e12: b,e12\n",
    "            t,e13: b,e13\n",
    "\"\"\"\n",
    "\n",
    "c = gf.read.from_yaml(sample_custom_component)\n",
    "c.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import gdsfactory as gf\n",
    "\n",
    "sample = \"\"\"\n",
    "\n",
    "instances:\n",
    "    t:\n",
    "      component: pad_array\n",
    "      settings:\n",
    "          orientation: 270\n",
    "          columns: 3\n",
    "    b:\n",
    "      component: pad_array\n",
    "      settings:\n",
    "          orientation: 90\n",
    "          columns: 3\n",
    "\n",
    "placements:\n",
    "    t:\n",
    "        x: 100\n",
    "        y: 1000\n",
    "routes:\n",
    "    route1:\n",
    "        routing_strategy: get_bundle_path_length_match\n",
    "        settings: \n",
    "            extra_length: 500\n",
    "            width: 2\n",
    "            layer: [31,0]\n",
    "            end_straight_length: 500\n",
    "        links:\n",
    "            t,e11: b,e11\n",
    "            t,e12: b,e12\n",
    "\"\"\"\n",
    "\n",
    "c = gf.read.from_yaml(sample)\n",
    "print(c.routes[\"t,e11:b,e11\"])\n",
    "c.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import gdsfactory as gf\n",
    "\n",
    "sample = \"\"\"\n",
    "instances:\n",
    "    t:\n",
    "      component: pad_array\n",
    "      settings:\n",
    "          orientation: 270\n",
    "          columns: 3\n",
    "    b:\n",
    "      component: pad_array\n",
    "      settings:\n",
    "          orientation: 90\n",
    "          columns: 3\n",
    "\n",
    "placements:\n",
    "    t:\n",
    "        x: -250\n",
    "        y: 1000\n",
    "routes:\n",
    "    route1:\n",
    "        routing_strategy: get_bundle_from_waypoints\n",
    "        settings:\n",
    "            waypoints:\n",
    "                - [0, 300]\n",
    "                - [400, 300]\n",
    "                - [400, 400]\n",
    "                - [-250, 400]\n",
    "            auto_widen: False\n",
    "        links:\n",
    "            b,e11: t,e11\n",
    "            b,e12: t,e12\n",
    "\n",
    "\"\"\"\n",
    "\n",
    "c = gf.read.from_yaml(sample)\n",
    "c.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from omegaconf import OmegaConf\n",
    "import io\n",
    "\n",
    "d = OmegaConf.load(\n",
    "    io.StringIO(\n",
    "        \"\"\"\n",
    "way_points: \n",
    "    - [0,0]\n",
    "    - [0, 600]\n",
    "    - [-250, 600]\n",
    "    - [-250, 1000]\n",
    "\n",
    "demo: a\n",
    "\"\"\"\n",
    "    )\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "d = OmegaConf.load(\n",
    "    io.StringIO(\"way_points:  [[0,0], [0, 600], [-250, 600], [-250, 1000]]\")\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "d"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "\n",
    "c = gf.Component(\"waypoints_sample\")\n",
    "route = gf.routing.get_route_from_waypoints(waypoints=np.array(d[\"way_points\"]))\n",
    "\n",
    "c.add(route.references)\n",
    "c.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note that you define the connections as `instance_source.port -> instance_destination.port` so the order is important and therefore you can only change the position of the `instance_destination`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Custom factories\n",
    "\n",
    "You can leverage netlist defined components to define more complex circuits"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import gdsfactory as gf\n",
    "\n",
    "mmi1x2_faba = gf.partial(gf.components.mmi1x2, length_mmi=30)\n",
    "mmi2x2_faba = gf.partial(gf.components.mmi2x2, length_mmi=30)\n",
    "\n",
    "yaml = \"\"\"\n",
    "name: sample_custom_cells\n",
    "instances:\n",
    "    mmit:\n",
    "      component: mmi2x2_faba\n",
    "    mmib:\n",
    "      component: mmi1x2_faba\n",
    "      settings:\n",
    "        width_mmi: 4.5\n",
    "placements:\n",
    "    mmit:\n",
    "        x: 100\n",
    "        y: 100\n",
    "routes:\n",
    "    route1:\n",
    "        links:\n",
    "            mmib,o2: mmit,o2\n",
    "            \n",
    "ports:\n",
    "    o1: mmib,o1\n",
    "    o2: mmit,o2\n",
    "    o3: mmit,o3\n",
    "    o4: mmit,o4\n",
    "\"\"\"\n",
    "\n",
    "# Make sure all the components that you want to use are registered in the active PDK\n",
    "gf.get_active_pdk().register_cells(mmi1x2_faba=mmi1x2_faba, mmi2x2_faba=mmi2x2_faba)\n",
    "c = gf.read.from_yaml(yaml)\n",
    "c"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import gdsfactory as gf\n",
    "\n",
    "\n",
    "@gf.cell\n",
    "def mzi_custom(length_x=0):\n",
    "    netlist = f\"\"\"\n",
    "instances:\n",
    "    mzi:\n",
    "        component: mzi_phase_shifter_top_heater_metal\n",
    "        settings:\n",
    "            length_x: 50\n",
    "        \n",
    "    pads:\n",
    "        component: pad_array\n",
    "        settings:\n",
    "            columns: 2\n",
    "\n",
    "placements:\n",
    "    mzi:\n",
    "        x: 0\n",
    "    pads:\n",
    "        y: 200\n",
    "        x: 0\n",
    "ports:\n",
    "    o1: mzi,o1\n",
    "    o2: mzi,o2\n",
    "    \n",
    "    \n",
    "routes:\n",
    "    electrical1:\n",
    "        links:\n",
    "            mzi,e1: pads,e11\n",
    "        settings:\n",
    "            layer: [41, 0]\n",
    "            width: 10\n",
    "            radius: 10\n",
    "            \n",
    "    electrical2:\n",
    "        links:\n",
    "            mzi,e2: pads,e12\n",
    "            \n",
    "        settings:\n",
    "            layer: [41, 0]\n",
    "            width: 10\n",
    "            radius: 10\n",
    "\n",
    "\"\"\"\n",
    "    return gf.read.from_yaml(netlist)\n",
    "\n",
    "\n",
    "c = mzi_custom(length_x=10, cache=False)\n",
    "c.show()\n",
    "c.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "c = gf.components.mzi()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "c.plot_netlist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "n = c.get_netlist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(c.get_netlist_dict().keys())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import gdsfactory as gf\n",
    "\n",
    "yaml = \"\"\"\n",
    "\n",
    "vars:\n",
    "    length_mmi: 10\n",
    "\n",
    "instances:\n",
    "    mmi_long:\n",
    "      component: mmi1x2\n",
    "      settings:\n",
    "        width_mmi: 4.5\n",
    "        length_mmi: ${vars.length_mmi}\n",
    "    mmi_short:\n",
    "      component: mmi1x2\n",
    "      settings:\n",
    "        width_mmi: 4.5\n",
    "        length_mmi: 5\n",
    "\"\"\"\n",
    "\n",
    "c = gf.read.from_yaml(yaml)\n",
    "c.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## get_netlist (Component -> YAML)\n",
    "\n",
    "Any component exports its netlist `get_netlist` and returns an `OmegaConf` dict that can be easily converted into JSON and YAML.\n",
    "\n",
    "While `component_from_yaml` converts YAML -> Component\n",
    "\n",
    "`get_netlist` converts Component -> YAML"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import io\n",
    "from omegaconf import OmegaConf\n",
    "import gdsfactory as gf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "c = gf.components.ring_single()\n",
    "c.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "c.plot_netlist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "netlist = c.get_netlist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "n = netlist"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "c.write_netlist(\"ring.yml\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "n = OmegaConf.load(\"ring.yml\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "i = list(n[\"instances\"].keys())\n",
    "i"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "instance_name0 = i[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "n[\"instances\"][instance_name0][\"settings\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```python\n",
    "import gdsfactory as gf\n",
    "from omegaconf import OmegaConf\n",
    "import pathlib\n",
    "\n",
    "c1 = gf.read.from_yaml('ring.yml')\n",
    "c1\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```python\n",
    "n = c1.get_netlist(full_settings=True)\n",
    "connections = n['connections']\n",
    "len(connections)\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Plot netlist\n",
    "\n",
    "You can plot the netlist of components.\n",
    "\n",
    "Every gdsfactory component can either be defined by its netlist or using layout friendly functions such as component sequence to define it and then `get_netlist()` method.\n",
    "\n",
    "Connections are determined by extracting all the ports of a component, and asuming that ports with the same (x, y) are connected.\n",
    "\n",
    " When you do `get_netlist()` for a component it will only show connections for the instances that belong to that component (it trims the netlist). So despite having  a lot of connections, it will show only the meaningful connections for that component. For example, a ring has a ring_coupler. but if you want to digg deeper, the connections that made that ring coupler are still available."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import gdsfactory as gf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "c = gf.components.mzi()\n",
    "c.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "c = gf.components.mzi()\n",
    "n = c.get_netlist()\n",
    "print(c.get_netlist_dict().keys())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "c.plot_netlist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "n.keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import gdsfactory as gf\n",
    "\n",
    "yaml = \"\"\"\n",
    "name: mmu_with_bend\n",
    "instances:\n",
    "\n",
    "    mmi1x2_12_0:\n",
    "        component: mmi1x2\n",
    "\n",
    "    bend_circular_R10p00_32_4:\n",
    "      component: bend_circular\n",
    "    \n",
    "    straight_L1p00_35_11:\n",
    "        component: straight\n",
    "        settings:\n",
    "            length: 10\n",
    "            layer: [2, 0]\n",
    "\n",
    "connections:\n",
    "    bend_circular_R10p00_32_4,o1: mmi1x2_12_0,o2\n",
    "    straight_L1p00_35_11,o1: bend_circular_R10p00_32_4,o2\n",
    "\"\"\"\n",
    "\n",
    "c = gf.read.from_yaml(yaml)\n",
    "c.show()\n",
    "c.name = \"mmi_with_bend_circular\"\n",
    "print(c.name)\n",
    "c.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "n = c.get_netlist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(c.get_netlist_yaml())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "n[\"connections\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "c.plot_netlist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "c = gf.components.mzi()\n",
    "c.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "c.plot_netlist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "c = gf.components.ring_single()\n",
    "c.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "c.plot_netlist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "c = gf.components.ring_double()\n",
    "c.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "c.plot_netlist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import gdsfactory as gf\n",
    "\n",
    "c = gf.components.ring_single()\n",
    "c.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "c.plot_netlist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "c = gf.components.ring_double()\n",
    "c.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "c.plot_netlist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(c.get_netlist_yaml())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "c = gf.components.mzi()\n",
    "c.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "c.plot_netlist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "c = gf.components.mzit()\n",
    "c.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "c.plot_netlist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "c = gf.components.mzi_lattice()\n",
    "c.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import gdsfactory as gf\n",
    "\n",
    "coupler_lengths = [10, 20, 30]\n",
    "coupler_gaps = [0.1, 0.2, 0.3]\n",
    "delta_lengths = [10, 100]\n",
    "\n",
    "c = gf.components.mzi_lattice(\n",
    "    coupler_lengths=coupler_lengths,\n",
    "    coupler_gaps=coupler_gaps,\n",
    "    delta_lengths=delta_lengths,\n",
    ")\n",
    "c.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(c.get_netlist_yaml())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "c.plot_netlist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "coupler_lengths = [10, 20, 30, 40]\n",
    "coupler_gaps = [0.1, 0.2, 0.4, 0.5]\n",
    "delta_lengths = [10, 100, 200]\n",
    "\n",
    "c = gf.components.mzi_lattice(\n",
    "    coupler_lengths=coupler_lengths,\n",
    "    coupler_gaps=coupler_gaps,\n",
    "    delta_lengths=delta_lengths,\n",
    ")\n",
    "c.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "n = c.get_netlist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "c.plot_netlist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
